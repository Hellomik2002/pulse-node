datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://admin:gpPHn4BEjdHyG91w@cluster0.bo29m4x.mongodb.net/pulse_new"
}

generator client {
  provider = "prisma-client-js"
  output   = "pulse_client"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator nestgraphql {
  // provider = "node node_modules/prisma-nestjs-graphql"
  // for yarn monorepos
  provider = "prisma-nestjs-graphql"
  output   = "../../apps/nest_js/src/@generated"
}

model PulseUser {
  id                         String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt
  email                      String             @unique
  password                   String
  fullName                   String
  uniqueName                 String             @unique
  phoneNumber                String             @unique
  address                    String
  avatar                     String?            @default("")
  role                       Role               @default(USER)
  appointmentsAsAuthor       ConsulationList[]  @relation("Author")
  appointmentsAsPatient      ConsulationList[]  @relation("Patient")
  researchDocumentsAsAuthour ResearchDocument[] @relation("Author")
  researchDocumentsAsPatient ResearchDocument[] @relation("Patient")
  doctor                     Doctor?
  authoredFiles              FileEntity[]

  @@map("User")
}

model ConsulationList {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  content   Json?
  author    PulseUser @relation("Author", fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  patient   PulseUser @relation("Patient", fields: [patientId], references: [id])
  patientId String    @db.ObjectId

  @@map("Appointment")
}

model ResearchDocument {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  content   Json?
  author    PulseUser @relation("Author", fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  patient   PulseUser @relation("Patient", fields: [patientId], references: [id])
  patientId String    @db.ObjectId

  @@map("ResearchDocument")
}

enum Role {
  ADMIN
  USER
  PATIENT
  DOCTOR
  LABORATORY
}

model Doctor {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  calLink            String           @default("")
  calUserId          Int              @default(0)
  user               PulseUser        @relation(fields: [userId], references: [id])
  userId             String           @unique @db.ObjectId
  specializationsIds String[]         @db.ObjectId
  specializations    Specialization[] @relation(fields: [specializationsIds], references: [id])
  description        Json?             @default("{}")
}

model Specialization {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  doctorIds   String[] @db.ObjectId
  Doctor      Doctor[] @relation(fields: [doctorIds], references: [id])
}

model FileEntity {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  fileName  String
  fileUrl   String
  key       String
  authorId  String?    @unique @db.ObjectId
  author    PulseUser? @relation(fields: [authorId], references: [id])
  metadata  Json       @default("{}")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// _id: string;

// @Field()
// name: string;

// @Field()
// description: string;

// @Field(() => PhotoURLGraph, { nullable: true })
// photoURL: PhotoURLGraph;

// @Field(() => ColorCodeGradientGraph, { nullable: true })
// colorCodeGradient: ColorCodeGradientGraph;

// @Field(() => [DoctorGraph])
// doctors: DoctorGraph[];

// @Field(() => [ServiceGraph])
// services: ServiceGraph[];
model Pharmacy {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  label     String?
  company   String?
  price     Float[]
  photoUrls String[]
}
